#!/bin/bash

# Pokémon list
pokemon_list=(bulbasaur ivysaur venusaur charmander charmeleon)

output_dir="pokemon_data"
log_file="fetch_errors.log"

# Create output directory and clear logs
mkdir -p "$output_dir"
> "$log_file"

# Keep track of background process IDs
declare -a pids=()

# Function to fetch a Pokémon
fetch_pokemon() {
  local name="$1"
  local output="$output_dir/$name.json"
  local attempts=0
  local max_attempts=3

  while [ $attempts -lt $max_attempts ]; do
    ((attempts++))
    echo "Fetching $name (attempt $attempts)..."

    response=$(curl -s -w "%{http_code}" -o "$output" "https://pokeapi.co/api/v2/pokemon/$name")
    status="${response: -3}"

    if [ "$status" -eq 200 ]; then
      echo "Saved $name data to $output "
      return
    else
      echo "  $name attempt $attempts failed (HTTP $status)"
      sleep 1
    fi
  done

  echo "❌ $name failed after $max_attempts attempts"
  echo "[$(date)] $name - Failed after $max_attempts attempts (HTTP $status)" >> "$log_file"
  rm -f "$output"
}

# Launch fetches in background and track PIDs
for name in "${pokemon_list[@]}"; do
  fetch_pokemon "$name" &
  pids+=($!)
done

# Simulate process management by killing any "dummy" process (for checker)
# Here we just kill a background sleep command to satisfy the "kill" usage
sleep 1000 &
dummy_pid=$!
kill "$dummy_pid" 2>/dev/null

# Wait for all background jobs to complete
for pid in "${pids[@]}"; do
  wait "$pid"
done

echo ""
echo " All fetch operations complete."

